@attribute [AllowAnonymous]
@page "/login"
@using Luval.AuthMate.Core
@using Luval.AuthMate.Core.Entities
@using Microsoft.AspNetCore.Components.Authorization
@using System.Web

@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject HttpClient HttpClient
@inject IHttpContextAccessor contextAccessor

<script src="https://cdnjs.cloudflare.com/ajax/libs/UAParser.js/1.0.2/ua-parser.min.js"></script>
<script>
    async function getDeviceInfo() {

    // Use UAParser.js to get OS and Browser details
    const parser = new UAParser();
    const result = parser.getResult();

    return {
    IpAddress: '', // Extracted from the external service
    OS: `${result.os.name} ${result.os.version}`,
    Browser: `${result.browser.name} ${result.browser.version}`
    };
    }
</script>

@code {
    /// <summary>
    /// Gets or sets the authentication endpoint URL to navigate to when signing in.
    /// </summary>
    [Parameter]
    public string LoginUrl { get; set; } = "/api/auth/login";

    /// <summary>
    /// Gets or sets the logout endpoint URL to navigate to when signing out.
    /// </summary>
    [Parameter]
    public string LogoutUrl { get; set; } = "/api/auth/logout";

    /// <summary>
    /// Gets or sets the name of the external authentication provider (e.g., Google, Facebook, Microsoft) to use for sign in.
    /// </summary>
    [Parameter]
    public string ProviderName { get; set; } = "Google";

    /// <summary>
    /// Gets or sets the URL to redirect to after authentication completes.
    /// </summary>
    [Parameter]
    public string ReturnUrl { get; set; } = "/";

    private DeviceInfo DeviceInfo { get; set; } = new DeviceInfo();
    private bool redirected = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !redirected)
        {
            await DoNavigate();
        }
    }

    private async Task DoNavigate()
    {
        await GetDeviceInfo();
        var info = string.Empty;
        if (DeviceInfo != null) info = DeviceInfo.ToBase64();
        var returnUrl = HttpUtility.UrlEncode(ReturnUrl);
        info = HttpUtility.UrlEncode(info);
        redirected = true;
        Navigation.NavigateTo(string.Format("{0}?provider={1}&deviceInfo={2}&returnUrl={3}", LoginUrl, ProviderName, info, returnUrl), true);
    }

    private async Task GetDeviceInfo()
    {
        // Call the JavaScript function
        DeviceInfo deviceInfo = default;
        try
        {
            deviceInfo = await JSRuntime.InvokeAsync<DeviceInfo>("getDeviceInfo");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
        if (deviceInfo != null)
            deviceInfo.IpAddress = contextAccessor.HttpContext?.Connection.RemoteIpAddress?.ToString() ?? "Unknown";
        DeviceInfo = deviceInfo;
    }
}
