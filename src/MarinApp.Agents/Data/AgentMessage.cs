using MarinApp.Core.Entities;
using Microsoft.SemanticKernel;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Threading.Tasks;

namespace MarinApp.Agents.Data
{

    /// <summary>
    /// Represents a message generated by an agent within a session, including metadata for the message context and formatting.
    /// </summary>
    [Display(Name = "Agent Message", Description = "Represents a message from an agent within a session context.")]
    public class AgentMessage : BaseEntity
    {
        /// <summary>
        /// Gets or sets the session identifier associated with the message.
        /// </summary>
        [Required]
        [Display(Name = "Session Id", Description = "The identifier of the session this message belongs to.")]
        public string SessionId { get; set; } = default!;

        /// <summary>
        /// Gets or sets the unique identifier of the agent that generated the message.
        /// </summary>
        [Required]
        [Display(Name = "Agent Id", Description = "The unique identifier of the agent who created the message.")]
        public string AgentId { get; set; } = default!;

        /// <summary>
        /// Gets or sets the display name of the agent.
        /// </summary>
        [Required]
        [Display(Name = "Agent Name", Description = "The display name of the agent who created the message.")]
        public string AgentName { get; set; } = default!;

        /// <summary>
        /// Gets or sets the role of the agent within the message context.
        /// </summary>
        [Required]
        [Display(Name = "Role", Description = "The role of the agent in the conversation context (e.g., system, user, assistant).")]
        public string Role { get; set; } = default!;

        /// <summary>
        /// Gets or sets the visible content of the message.
        /// </summary>
        [Required]
        [Display(Name = "Content", Description = "The textual content of the message shown to users.")]
        public string Content { get; set; } = default!;

        /// <summary>
        /// Gets or sets the internal or serialized content for system processing.
        /// </summary>
        [Required]
        [Display(Name = "Inner Content", Description = "Serialized inner content of the message for internal use.")]
        public string InnerContent { get; set; } = default!;

        /// <summary>
        /// Gets or sets the MIME type of the message content.
        /// </summary>
        [Required]
        [Display(Name = "MIME Type", Description = "The MIME type indicating the format of the content (e.g., text/markdown).")]
        public string MimeType { get; set; } = "text/markdown";

        /// <summary>
        /// Gets or sets the model identifier used to generate the message.
        /// </summary>
        [Required]
        [Display(Name = "Model Id", Description = "Identifier for the model that generated this message.")]
        public string ModelId { get; set; } = default!;

        /// <summary>
        /// Gets or sets the metadata in JSON format related to the message.
        /// </summary>
        [Required]
        [Display(Name = "Metadata", Description = "Serialized metadata in JSON format associated with the message.")]
        public string Metadata { get; set; } = "{}";

        /// <summary>
        /// Creates a new instance of <see cref="AgentMessage"/> using the specified session ID, agent, and content.
        /// </summary>
        /// <param name="sessionId">The session identifier.</param>
        /// <param name="agent">The agent generating the message.</param>
        /// <param name="content">The chat message content.</param>
        /// <returns>A new <see cref="AgentMessage"/> instance.</returns>
        public static AgentMessage Create(string sessionId, AgentBase agent, ChatMessageContent content)
        {
            var o = new JsonSerializerOptions
            {
                DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull,
                WriteIndented = false,
                ReferenceHandler = ReferenceHandler.IgnoreCycles
            };
            return new AgentMessage
            {
                SessionId = sessionId ?? throw new ArgumentNullException(nameof(sessionId)),
                AgentId = agent?.Id ?? throw new ArgumentNullException(nameof(agent)),
                AgentName = agent?.Name ?? throw new ArgumentNullException(nameof(agent)),
                Role = Convert.ToString(content.Role) ?? throw new ArgumentNullException(nameof(content.Role)),
                Content = content.Content ?? throw new ArgumentNullException(nameof(content.Content)),
                InnerContent = JsonSerializer.Serialize(content.InnerContent, o) ?? "{}",
                MimeType = content.MimeType ?? "text/markdown",
                ModelId = content.ModelId ?? throw new ArgumentNullException(nameof(content.ModelId)),
                Metadata = content.Metadata != null ? JsonSerializer.Serialize(content.Metadata, o) : "{}"
            };
        }
    }

}
