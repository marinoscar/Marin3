using MarinApp.Agents.Data;
using Microsoft.SemanticKernel;
using Microsoft.SemanticKernel.ChatCompletion;

namespace MarinApp.Agents
{
    /// <summary>
    /// Defines the contract for conversational agents, including session management, message streaming, templating, and history persistence.
    /// </summary>
    public interface IAgent
    {
        /// <summary>
        /// Gets or sets the description of the agent.
        /// </summary>
        string Description { get; set; }

        /// <summary>
        /// Gets the current chat history for the agent session.
        /// </summary>
        ChatHistory History { get; }

        /// <summary>
        /// Gets or sets the unique identifier for this agent.
        /// </summary>
        string Id { get; set; }

        /// <summary>
        /// Gets or sets the display name of the agent.
        /// </summary>
        string Name { get; set; }

        /// <summary>
        /// Gets the current system prompt used by the agent.
        /// </summary>
        string SystemPrompt { get; }

        /// <summary>
        /// Occurs when a message has been completed and processed by the agent.
        /// </summary>
        event EventHandler<(ChatMessageContent MessageContent, AgentMessage AgentMessage)>? MessageCompleted;

        /// <summary>
        /// Gets a message from the agent using a <see cref="ChatMessageContent"/> object, invoking a callback for each streaming response chunk.
        /// </summary>
        /// <param name="content">The chat message content to send to the agent.</param>
        /// <param name="executionSettings">The prompt execution settings for the chat completion service.</param>
        /// <param name="onResponse">A callback invoked for each streaming response chunk.</param>
        /// <param name="cancellationToken">A cancellation token for the operation.</param>
        /// <returns>The final <see cref="AgentMessage"/> generated by the agent.</returns>
        Task<AgentMessage> GetMessageAsync(ChatMessageContent content, PromptExecutionSettings executionSettings, Action<StreamingChatMessageContent> onResponse, CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets a message from the agent using a static prompt string, invoking a callback for each streaming response chunk.
        /// </summary>
        /// <param name="prompt">The prompt string to send to the agent.</param>
        /// <param name="executionSettings">The prompt execution settings for the chat completion service.</param>
        /// <param name="onResponse">A callback invoked for each streaming response chunk.</param>
        /// <param name="cancellationToken">A cancellation token for the operation.</param>
        /// <returns>The final <see cref="AgentMessage"/> generated by the agent.</returns>
        Task<AgentMessage> GetMessageAsync(string prompt, PromptExecutionSettings executionSettings, Action<StreamingChatMessageContent> onResponse, CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets a message from the agent using a Handlebars template and data model, invoking a callback for each streaming response chunk.
        /// </summary>
        /// <typeparam name="T">The type of the data model used for template binding.</typeparam>
        /// <param name="template">The Handlebars template string.</param>
        /// <param name="data">The data model to bind to the template.</param>
        /// <param name="executionSettings">The prompt execution settings for the chat completion service.</param>
        /// <param name="onResponse">A callback invoked for each streaming response chunk.</param>
        /// <param name="cancellationToken">A cancellation token for the operation.</param>
        /// <returns>The final <see cref="AgentMessage"/> generated by the agent.</returns>
        Task<AgentMessage> GetMessageAsync<T>(string template, T data, PromptExecutionSettings executionSettings, Action<StreamingChatMessageContent> onResponse, CancellationToken cancellationToken = default);

        /// <summary>
        /// Called before a message is sent to the agent.
        /// </summary>
        /// <param name="messageContent">The chat message content to be sent.</param>
        void OnBeforeMessageSent(ChatMessageContent messageContent);

        /// <summary>
        /// Sets the current session identifier and resets the chat history for the session.
        /// </summary>
        /// <param name="sessionId">The session identifier to set.</param>
        /// <returns>The session identifier that was set.</returns>
        string SetSession(string sessionId);

        /// <summary>
        /// Sets the system message for the agent to a static message string.
        /// </summary>
        /// <param name="message">The system message to set.</param>
        void SetSystemMessage(string message);

        /// <summary>
        /// Sets the system message for the agent using a Handlebars template and data model.
        /// </summary>
        /// <typeparam name="T">The type of the data model used for template binding.</typeparam>
        /// <param name="template">The Handlebars template string.</param>
        /// <param name="data">The data model to bind to the template.</param>
        void SetSystemMessage<T>(string template, T data);

        /// <summary>
        /// Starts a new session for the agent, generating a new session identifier and resetting the session state.
        /// </summary>
        /// <returns>The new session identifier.</returns>
        string StartSession();

        /// <summary>
        /// Streams a message to the agent using a <see cref="ChatMessageContent"/> object, invoking a callback for each streaming response chunk.
        /// </summary>
        /// <param name="content">The chat message content to send to the agent.</param>
        /// <param name="executionSettings">The prompt execution settings for the chat completion service.</param>
        /// <param name="onResponse">A callback invoked for each streaming response chunk.</param>
        /// <param name="cancellationToken">A cancellation token for the operation.</param>
        /// <returns>The final <see cref="AgentMessage"/> generated by the agent.</returns>
        Task<AgentMessage> StreamMessageAsync(ChatMessageContent content, PromptExecutionSettings executionSettings, Action<StreamingChatMessageContent> onResponse, CancellationToken cancellationToken = default);

        /// <summary>
        /// Streams a message to the agent using a static prompt string, invoking a callback for each streaming response chunk.
        /// </summary>
        /// <param name="prompt">The prompt string to send to the agent.</param>
        /// <param name="executionSettings">The prompt execution settings for the chat completion service.</param>
        /// <param name="onResponse">A callback invoked for each streaming response chunk.</param>
        /// <param name="cancellationToken">A cancellation token for the operation.</param>
        /// <returns>The final <see cref="AgentMessage"/> generated by the agent.</returns>
        Task<AgentMessage> StreamMessageAsync(string prompt, PromptExecutionSettings executionSettings, Action<StreamingChatMessageContent> onResponse, CancellationToken cancellationToken = default);

        /// <summary>
        /// Streams a message to the agent using a Handlebars template and data model, invoking a callback for each streaming response chunk.
        /// </summary>
        /// <typeparam name="T">The type of the data model used for template binding.</typeparam>
        /// <param name="template">The Handlebars template string.</param>
        /// <param name="data">The data model to bind to the template.</param>
        /// <param name="executionSettings">The prompt execution settings for the chat completion service.</param>
        /// <param name="onResponse">A callback invoked for each streaming response chunk.</param>
        /// <param name="cancellationToken">A cancellation token for the operation.</param>
        /// <returns>The final <see cref="AgentMessage"/> generated by the agent.</returns>
        Task<AgentMessage> StreamMessageAsync<T>(string template, T data, PromptExecutionSettings executionSettings, Action<StreamingChatMessageContent> onResponse, CancellationToken cancellationToken = default);
    }
}